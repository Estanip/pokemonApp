{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Locus/Desktop/Programacion/Henry/PI/PI-Pokemon-main/pokemonApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Locus/Desktop/Programacion/Henry/PI/PI-Pokemon-main/pokemonApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"C:/Users/Locus/Desktop/Programacion/Henry/PI/PI-Pokemon-main/pokemonApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/Locus/Desktop/Programacion/Henry/PI/PI-Pokemon-main/pokemonApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{connect}from'react-redux';import{toast}from'react-toastify';import{getPokemonsByType as _getPokemonsByType,getTypes as _getTypes}from'../../actions';import Select from'react-select';import'./SearchByType.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function SearchBy(_ref){var getPokemonsByType=_ref.getPokemonsByType,types=_ref.types,getTypes=_ref.getTypes,pokemons=_ref.pokemons;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),inputSearch=_useState2[0],setInput=_useState2[1];var customStyles={container:function container(provided,state){return _objectSpread(_objectSpread({},provided),{},{width:state.selectProps.width,marginLeft:state.selectProps.marginLeft});},menu:function menu(provided,state){return _objectSpread(_objectSpread({},provided),{},{borderBottom:'1px dotted pink',color:state.selectProps.menuColor});},singleValue:function singleValue(provided,state){var opacity=state.isDisabled?0.5:1;var transition='opacity 300ms';return _objectSpread(_objectSpread({},provided),{},{opacity:opacity,transition:transition});}};var typesOption=[];types.map(function(e){return typesOption.push({value:e.id,label:e.name});});var handleOnClick=function handleOnClick(e){e.preventDefault();var search=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var resultType;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(inputSearch===\"\"){toast.warn(\"No se ingreso un tipo\");}resultType=pokemons.filter(function(e){return e.types.includes(inputSearch);});if(resultType.length===0){toast.warn(\"No existen pokemons con ese tipo\");}else{getPokemonsByType(inputSearch);}case 3:case\"end\":return _context.stop();}}},_callee);}));return function search(){return _ref2.apply(this,arguments);};}();search();};useEffect(function(){var gettingTypes=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getTypes();case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function gettingTypes(){return _ref3.apply(this,arguments);};}();gettingTypes();},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"searchByType-container\",children:/*#__PURE__*/_jsxs(\"form\",{className:\"searchByType__form-container\",onSubmit:function onSubmit(e){return handleOnClick(e);},children:[/*#__PURE__*/_jsx(\"div\",{className:\"select__container\",children:/*#__PURE__*/_jsx(Select,{styles:customStyles,width:\"400px\",menuColor:\"#3B4CCA\",name:\"tipos\",options:typesOption,onChange:function onChange(e){return setInput(e.label);},required:true})}),/*#__PURE__*/_jsx(\"div\",{className:\"btnSearchByType__container\",children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Search By Type\"})})]})});}var mapStateToProps=function mapStateToProps(state){return{types:state.types,pokemons:state.pokemons};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getPokemonsByType:function getPokemonsByType(type){return dispatch(_getPokemonsByType(type));},getTypes:function getTypes(){return dispatch(_getTypes());}};};export default connect(mapStateToProps,mapDispatchToProps)(SearchBy);","map":{"version":3,"sources":["C:/Users/Locus/Desktop/Programacion/Henry/PI/PI-Pokemon-main/pokemonApp/client/src/components/SearchByType/SearchByType.js"],"names":["React","useState","useEffect","connect","toast","getPokemonsByType","getTypes","Select","SearchBy","types","pokemons","inputSearch","setInput","customStyles","container","provided","state","width","selectProps","marginLeft","menu","borderBottom","color","menuColor","singleValue","opacity","isDisabled","transition","typesOption","map","e","push","value","id","label","name","handleOnClick","preventDefault","search","warn","resultType","filter","includes","length","gettingTypes","mapStateToProps","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { getPokemonsByType, getTypes } from '../../actions';\r\nimport Select from 'react-select';\r\nimport './SearchByType.css';\r\n\r\n\r\nfunction SearchBy({ getPokemonsByType, types, getTypes, pokemons }) {\r\n\r\n    const [inputSearch, setInput] = useState(\"\");\r\n\r\n    const customStyles = {\r\n        container: (provided, state) => ({\r\n            ...provided,\r\n            width: state.selectProps.width,\r\n            marginLeft: state.selectProps.marginLeft\r\n        }),\r\n\r\n        menu: (provided, state) => ({\r\n            ...provided,\r\n            borderBottom: '1px dotted pink',\r\n            color: state.selectProps.menuColor,\r\n        }),\r\n\r\n        singleValue: (provided, state) => {\r\n            const opacity = state.isDisabled ? 0.5 : 1;\r\n            const transition = 'opacity 300ms';\r\n\r\n            return { ...provided, opacity, transition };\r\n        }\r\n    }\r\n\r\n    let typesOption = [];\r\n    types.map(e => typesOption.push({ value: e.id, label: e.name }))\r\n\r\n\r\n    const handleOnClick = (e) => {\r\n        e.preventDefault();\r\n        const search = async () => {\r\n\r\n            if (inputSearch === \"\") {\r\n                toast.warn(\"No se ingreso un tipo\")\r\n            }\r\n\r\n            let resultType = pokemons.filter(e => e.types.includes(inputSearch))\r\n\r\n            if (resultType.length === 0) {\r\n                toast.warn(\"No existen pokemons con ese tipo\")\r\n            } else {\r\n                getPokemonsByType(inputSearch)\r\n            }\r\n        }\r\n        search();\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const gettingTypes = async () => {\r\n            await getTypes()\r\n        }\r\n\r\n        gettingTypes()\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className='searchByType-container' >\r\n            <form\r\n                className=\"searchByType__form-container\"\r\n                onSubmit={(e) => handleOnClick(e)}>\r\n\r\n                <div className='select__container'>\r\n                    <Select\r\n                        styles={customStyles}\r\n                        width=\"400px\"\r\n                        menuColor='#3B4CCA'\r\n                        name='tipos'\r\n                        options={typesOption}\r\n                        onChange={(e) => setInput(e.label)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='btnSearchByType__container'>\r\n                    <button\r\n                        type='submit'>\r\n                        Search By Type\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        types: state.types,\r\n        pokemons: state.pokemons\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        getPokemonsByType: (type) => dispatch(getPokemonsByType(type)),\r\n        getTypes: () => dispatch(getTypes())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBy)"]},"metadata":{},"sourceType":"module"}